<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Project List Page</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.0-2/css/all.min.css"
      integrity="sha256-46r060N2LrChLLb5zowXQ72/iKKNiw/lAmygmHExk/o="
      crossorigin="anonymous" />
    <link rel="stylesheet" href="/css/mystyle.css" />
  </head>
  <body>
    <div class="container">
      <h1 class="title">Projects List</h1>
      <table class="table is-striped is-hoverable">
        <thead>
          <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Categories</th>
            <th>Status</th>
            <th>CreatedAt</th>
            <th>UpdatedAt</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="projects-table-body">
          <!-- Projects will be rendered here -->
        </tbody>
      </table>
    </div>

    <script>
      // Function to truncate the description to 30 characters
      function truncateText(text, maxLength) {
        if (text.length > maxLength) {
          return text.substring(0, maxLength) + "...";
        }
        return text;
      }

      // Function to fetch and render projects
      async function loadProjects() {
        try {
          const response = await fetch(
            "/api/projects?orderby=updatedAt&order=desc",
            {
              headers: {
                "x-view-request": "true",
              },
            }
          );
          const projects = await response.json();

          const tableBody = document.getElementById("projects-table-body");
          tableBody.innerHTML = ""; // Clear existing content

          projects.forEach((project) => {
            const row = document.createElement("tr");

            // Generate a list of category names
            const categories = project.categories
              .map((cat) => cat.name)
              .join(", ");

            row.innerHTML = `
              <td>${project.name}</td>
              <td title="${project.description}">${truncateText(
              project.description,
              30
            )}</td>
              <td>${categories}</td>
              <td>${project.statut}</td>
              <td>${project.createdAt}</td>
              <td>${project.updatedAt}</td>
              <td>
                <a href="/projects-view/${
                  project._id
                }/edit" class="button is-small is-info">Edit</a>
                <button class="button is-small is-danger" onclick="deleteProject('${
                  project._id
                }')">Delete</button>
              </td>
            `;

            tableBody.appendChild(row);
          });
        } catch (error) {
          console.error("Error fetching projects:", error);
        }
      }

      // Function to delete a project
      async function deleteProject(id) {
        if (confirm("Are you sure you want to delete this project?")) {
          try {
            const response = await fetch(`/api/projects/${id}`, {
              method: "DELETE",
            });

            if (response.ok) {
              alert("Project deleted successfully.");
              loadProjects(); // Reload the projects list
            } else {
              alert("Failed to delete the project.");
            }
          } catch (error) {
            console.error("Error deleting project:", error);
          }
        }
      }

      // Load projects on page load
      document.addEventListener("DOMContentLoaded", loadProjects);
    </script>
  </body>
</html>
